"use client";

import Sidebar from "@/components/Sidebar";
import Link from "next/link";
import { FiUpload, FiCheckCircle, FiCircle, FiMoreHorizontal } from "react-icons/fi";
import { TfiArrowCircleLeft } from "react-icons/tfi";
import { IoMdClose } from "react-icons/io";
import DashboardNavbar from "../../components/DashboardNavbar";
import { useState, useEffect } from "react";
import { BsStars } from "react-icons/bs";
import { getCookie } from "@/util/cookies";
import CreateTaskModal from "@/components/CreateTaskModal";
import AuthGuard from "../hoc/AuthGuard";

function Dashboard() {
    const [sidebarExpanded, setSidebarExpanded] = useState(true);
  const [profileComplete, setProfileCompletion] = useState(false);
  const [checklistHidden, hideChecklist] = useState(false);
  const [tasks, setTasks] = useState([]);
  const [firstname, setFirstname] = useState("");
  const [lastname, setLastname] = useState("");
  const [emailaddress, setEmailaddress] = useState("");
  const [showModal, setShowModal] = useState(false);
  const [activeDropdownIndex, setActiveDropdownIndex] = useState(null);
  const [showUpdateTaskModal, setShowUpdateTaskModal] = useState(false);
  const [selectedTaskInfo, setSelectedTaskInfo] = useState({
    title: "",
    description: "",
    completed: false
  });
  const userId = getCookie("userId");
  const token = getCookie("token");
  const [taskInfo, setTaskInfo] = useState({
    id: "",
    title: "",
    description: "",
    completed: false,
  }); 

  const userId = getCookie("userId");
  const token = getCookie("token");

  const getUser = async (id) => {
    if (!id) return;
    try {
      const response = await fetch(`http://localhost/user?id=${id}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: token,
        },
      });
      const result = await response.json();
      if (response.ok) {
        setFirstname(result.data.firstName);
        setLastname(result.data.lastName)
        setEmailaddress(result.data.emailAddress);
      }
    } catch (error) {
      console.log(error);
    }
  };

  const createTask = async () => {
    try {
      const response = await fetch(`http://localhost/create-task`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: token,
        },
        body: JSON.stringify(taskInfo),
      });
      if (response.ok) getTasks(userId);
    } catch (error) {
      console.log(error);
    }
  };

  const getTasks = async (id) => {
    if (!id) return;
    try {
      const response = await fetch(`http://localhost/user-tasks?id=${id}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: token,
        },
      });
      const result = await response.json();
      if (response.ok) setTasks(result.data);
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    if (userId) getUser(userId);
  }, []);

  useEffect(() => {
    if (userId) getTasks(userId);
  }, [userId]);

  return (
    <div className="flex bg-light-gray text-black">
      <div className={`fixed inset-y-0 left-0 transition-all duration-300 ${sidebarExpanded ? "w-64" : "w-20"}`}>
        <Sidebar isExpanded={sidebarExpanded} />
      </div>
      <div className={`flex-1 transition-all duration-300 ${sidebarExpanded ? "ml-64" : "ml-20"}`}>
        <DashboardNavbar
          toggleSidebar={() => setSidebarExpanded(!sidebarExpanded)}
          firstName={firstname}
          lastName={lastName}
          emailAddress={emailaddress}
        />
        <div className="p-6 bg-light-gray min-h-screen pt-20">
          <h1 className="text-xl mt-0 font-regular">
            Hi {firstname.charAt(0).toUpperCase() + firstname.slice(1)}, view your most recent flashcards and quizzes.
          </h1>

          <div className="bg-white p-6 rounded-lg shadow-md mt-4">
            <h2 className="text-xl font-semibold mb-4">My Checklist</h2>
            <div className="flex flex-wrap gap-4">
              {tasks.map((task, i) => (
                <div key={i} className="flex justify-between items-center bg-gray-100 w-[49.5%] py-3 px-4 h-[5em] rounded-lg hover:bg-gray-200 transition relative">
                  <div>
                    <h3 className="font-bold">{task.title}</h3>
                    <p className="text-sm text-gray-600">{task.description}</p>
                  </div>
                  <div className="relative">
                    <button onClick={() => setActiveDropdownIndex(activeDropdownIndex === i ? null : i)} className="p-2 hover:bg-gray-300 rounded-full">
                      <FiMoreHorizontal size={18} />
                    </button>
                    {activeDropdownIndex === i && (
                      <div className="absolute right-0 w-32 bg-white border rounded-lg shadow-lg z-10">
                        <button onClick={() => {
                          setSelectedTaskInfo(task);
                          setShowUpdateTaskModal(true);
                        }} className="block w-full text-left px-4 py-2 text-sm hover:bg-gray-100">
                          Update
                        </button>
                        <button onClick={() => console.log("Delete")} className="block w-full text-left px-4 py-2 text-sm hover:bg-gray-100">
                          Delete
                        </button>
                        <button onClick={() => console.log("Mark Complete")} className="block w-full text-left px-4 py-2 text-sm hover:bg-gray-100">
                          Mark Complete
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              ))}
              {tasks.length === 0 && (
                <div className="h-[20em] p-4 rounded-md flex justify-start border-2 w-full border-dashed">
                  <p className="text-gray-500 italic">No tasks, create your first task.</p>
                </div>
              )}
              <button className="w-full bg-blue text-white py-2 rounded-lg hover:font-bold transition" onClick={() => {
                setTaskInfo({ id: userId, title: "", description: "", completed: false });
                setShowModal(true);
              }}>
                + Create New Task
              </button>
            </div>
          </div>

          <div className="bg-white p-6 rounded-lg shadow-md mt-6">
            <h2 className="text-xl font-semibold mb-4 flex items-center">Generate tasks with AI <BsStars className="ml-2 text-lg" /></h2>
            <textarea className="w-full p-4 border rounded-lg bg-gray-100" placeholder="Add your notes here"></textarea>
            <div className="flex items-center mt-4 space-x-4">
              <button className="flex items-center space-x-2 bg-blue text-white px-6 py-2 rounded-lg hover:bg-blue-dark transition">
                <FiUpload />
                <span>Upload file</span>
              </button>
              <button className="bg-blue text-white px-6 py-2 rounded-lg hover:bg-blue-dark transition">
                Generate Notes
              </button>
            </div>
          </div>
        </div>
      </div>

      {showModal && <CreateTaskModal isOpen={showModal} onClose={() => setShowModal(false)} taskInfo={taskInfo} setTaskInfo={setTaskInfo} createTask={createTask} />}
      {
        showUpdateTaskModal && <UpdateTaskModal 
          isOpen={showUpdateTaskModal} 
          onClose={() => setShowUpdateTaskModal(false)}
          selectedStockInfo={selectedTaskInfo}
          updateTask={updateTask}
        />
      }
    </div>
  );
}

function UpdateTaskModal({ isOpen, onClose, selectedStockInfo, setSelectedStockInfo, updateTask }) {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white rounded-lg shadow-lg p-6 w-full max-w-md">
        <h2 className="text-xl font-semibold mb-4">Create New Task</h2>

        <div className="mb-4">
          <label className="block text-gray-700 mb-1">Title</label>
          <input
            type="text"
            value={selectedStockInfo.title}
            onChange={(e) => setSelectedStockInfo({ ...selectedStockInfo, title: e.target.value })}
            className="w-full p-2 border rounded"
            placeholder="Enter task title"
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700 mb-1">Description</label>
          <textarea
            value={selectedStockInfo.description || ""}
            onChange={(e) => setSelectedStockInfo({ ...selectedStockInfo, description: e.target.value })}
            className="w-full p-2 border rounded"
            placeholder="Enter task description"
          />
        </div>

        <div className="mb-4 flex items-center">
          <input
            type="checkbox"
            checked={selectedStockInfo.completed || false}
            onChange={(e) => setSelectedStockInfo({ ...selectedStockInfo, completed: e.target.checked })}
            className="mr-2"
          />
          <label className="text-gray-700">Completed</label>
        </div>

        <div className="flex justify-end space-x-2">
          <button
            onClick={onClose}
            className="px-4 py-2 rounded bg-gray-300 hover:bg-gray-400"
          >
            Cancel
          </button>
          <button
            onClick={() => {
              createTask();
              onClose();
            }}
            className="px-4 py-2 rounded bg-blue text-white hover:bg-blue-dark"
          >
            Save Task
          </button>
        </div>
      </div>
    </div>
  );
}


export default AuthGuard(Dashboard);
